<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>nightlyrss.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="nightlyrss.js">
		<outline text="var myProductName = &quot;nightlyRss&quot;, myVersion = &quot;0.4.2&quot;;"></outline>
		<outline text=""></outline>
		<outline text="var utils = require (&quot;./lib/utils.js&quot;);"></outline>
		<outline text="var dateFormat = require (&quot;dateformat&quot;);"></outline>
		<outline text="var filesystem = require (&quot;./lib/filesystem.js&quot;);"></outline>
		<outline text="var fs = require (&quot;fs&quot;);"></outline>
		<outline text="var request = require (&quot;request&quot;);"></outline>
		<outline text="var FeedParser = require (&quot;feedparser&quot;);"></outline>
		<outline text="var urlParser = require (&quot;url&quot;);"></outline>
		<outline text="var s3 = require (&quot;./lib/s3.js&quot;);"></outline>
		<outline text="var sendMail = require (&quot;./lib/sendmail.js&quot;);"></outline>
		<outline text=""></outline>
		<outline isComment="true" text="var urlLinkblogFeed = &quot;http://radio3.io/users/davewiner/rss.xml&quot;;"></outline>
		<outline isComment="true" text="var s3PathNightlyFeed = &quot;/scripting.com/misc/nightlyLinks.xml&quot;;"></outline>
		<outline isComment="true" text="var emailSendTo = &quot;daves-linkblog@googlegroups.com&quot;;"></outline>
		<outline isComment="true" text="var emailSendFrom = &quot;dave.winer@gmail.com&quot;;"></outline>
		<outline isComment="true" text="var titleTemplate = &quot;&lt;h1&gt;Dave Winer's links for [date] &lt;/h1&gt;\n\n&quot;;"></outline>
		<outline text=""></outline>
		<outline text="var emailTemplateFile = &quot;emailtemplate.html&quot;, emailTemplate;"></outline>
		<outline text=""></outline>
		<outline text="var stats = {">
			<outline text="ctPublishes: 0,"></outline>
			<outline text="whenLastPublish: new Date (0),"></outline>
			<outline text="ctSecsLastPublish: 0"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var fnameStats = &quot;stats.json&quot;;"></outline>
		<outline text="var flScheduledEveryMinute = false;"></outline>
		<outline text="var flStatsDirty = false;"></outline>
		<outline text="var fnameConfig = &quot;config.json&quot;;"></outline>
		<outline text="var config = {">
			<outline text="};"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function formatDateTime (d) { ">
			<outline text="d = new Date (d);"></outline>
			<outline text="return (dateFormat (d, &quot;m/d/yyyy; h:MM TT&quot;));"></outline>
			<outline isComment="true" text="return (dateFormat (d, &quot;dddd, mmmm dS, yyyy, h:MM:ss TT&quot;));"></outline>
			<outline isComment="true" text="return (d.toLocaleDateString () + &quot; at &quot; + d.toLocaleTimeString ());"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getDomainFromUrl (url) {">
			<outline text="var parsedUrl = urlParser.parse (url);"></outline>
			<outline text="var s = parsedUrl.hostname;"></outline>
			<outline text="var ct = utils.stringCountFields (s, &quot;.&quot;);"></outline>
			<outline text="if (ct &gt;= 3) {">
				<outline text="s = utils.stringNthField (s, &quot;.&quot;, ct - 1) + &quot;.&quot; + utils.stringNthField (s, &quot;.&quot;, ct);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (s);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function statsChanged () {">
			<outline text="flStatsDirty = true;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function writeStats (f, stats) {">
			<outline text="filesystem.sureFilePath (f, function () {">
				<outline text="fs.writeFile (f, utils.jsonStringify (stats), function (err) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;writeStats: error == &quot; + err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readStats (f, stats, callback) {">
			<outline text="fs.exists (f, function (flExists) {">
				<outline text="if (flExists) {">
					<outline text="fs.readFile (f, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;readStats: error reading file &quot; + f + &quot; == &quot; + err.message)"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline created="Tue, 11 Jun 2013 13:43:44 GMT" pgfnum="25734" text="var storedStats = JSON.parse (data.toString ());"></outline>
							<outline text="for (var x in storedStats) {">
								<outline text="stats [x] = storedStats [x];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="writeStats (f, stats);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="writeStats (f, stats);"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function readFeed (urlFeed, callback) {">
			<outline text="var itemarray = new Array ();"></outline>
			<outline text="var req = request (urlFeed);"></outline>
			<outline text="function feedError () {">
				<outline isComment="true" text="feed.stats.ctReadErrors++;"></outline>
				<outline isComment="true" text="feed.stats.ctConsecutiveReadErrors++;"></outline>
				<outline isComment="true" text="feed.stats.whenLastReadError = starttime;"></outline>
				<outline isComment="true" text="writeFeed ();"></outline>
				<outline isComment="true" text=""></outline>
				<outline isComment="true" text="feedstats.ctReadErrors++;"></outline>
				<outline isComment="true" text="feedstats.ctConsecutiveReadErrors++;"></outline>
				<outline isComment="true" text="feedstats.whenLastReadError = starttime;"></outline>
				<outline text=""></outline>
				<outline text="callback (undefined);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var feedparser = new FeedParser ();"></outline>
			<outline text="req.on (&quot;response&quot;, function (res) {">
				<outline text="var stream = this;"></outline>
				<outline text="if (res.statusCode == 200) {">
					<outline text="stream.pipe (feedparser);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="feedError ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="req.on (&quot;error&quot;, function (res) {">
				<outline text="feedError ();"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;readable&quot;, function () {">
				<outline text="try {">
					<outline text="var item = this.read ();"></outline>
					<outline text="itemarray [itemarray.length] = item;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="catch (err) {">
					<outline text="console.log (&quot;readFeed: parser error == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;error&quot;, function () {">
				<outline text="feedError ();"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="feedparser.on (&quot;end&quot;, function () {">
				<outline text="callback (itemarray);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildNightlyFeed (theDay, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="12/31/18; 10:23:35 PM by DW">
					<outline text="Avoid crashing if item is null."></outline>
					</outline>
				<outline text="10/3/16; 7:12:58 PM by DW">
					<outline text="Added an item-level title on the theory that this is what IFTTT needs to do its thing. ">
						<outline text="http://scripting.com/2016/10/03/iftttDoesntLikeThisFeed.html"></outline>
						</outline>
					</outline>
				<outline text="9/7/16; 9:15:54 PM by DW">
					<outline text="Read the linkblog feed, create a new one-item feed with the text of all the posts from theDay. "></outline>
					</outline>
				</outline>
			<outline text="var now = new Date ();"></outline>
			<outline text=""></outline>
			<outline text="theDay.setSeconds (0);"></outline>
			<outline text="theDay.setMinutes (0);"></outline>
			<outline text="theDay.setHours (0);"></outline>
			<outline text=""></outline>
			<outline text="readFeed (config.urlLinkblogFeed, function (itemarray) {">
				<outline text="var nowstring = formatDateTime (now), nowUtcString = now.toUTCString (), todaysText = &quot;&quot;;"></outline>
				<outline text="var feedTitle, feedLink, feedDescription, feedDocs;"></outline>
				<outline isComment="true" text="var todaysPreText = &quot;&lt;h1style=\&quot;color: black;\&quot;&gt;Dave Winer's links for &quot; + dateFormat (theDay, &quot;m/d/yyyy&quot;) + &quot;&lt;/h1&gt;\n\n&quot;;"></outline>
				<outline text="var todaysPreText = utils.replaceAll (config.titleTemplate, &quot;[date]&quot;, dateFormat (theDay, &quot;m/d/yyyy&quot;));"></outline>
				<outline text=""></outline>
				<outline isComment="true" text="console.log (&quot;There are &quot; + itemarray.length + &quot; items in the feed.&quot;);"></outline>
				<outline text="for (var i = 0; i &lt; itemarray.length; i++) {">
					<outline text="var item = itemarray [i];"></outline>
					<outline text="if (item != null) { //12/31/18 by DW">
						<outline text="if (utils.sameDay (theDay, item.pubDate)) {">
							<outline text="var link = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot;&gt;&quot; + getDomainFromUrl (item.link) + &quot;&lt;/a&gt;&quot;;"></outline>
							<outline text="if (todaysText.length &gt; 0) {">
								<outline text="todaysText += &quot;\n\n&quot;;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="todaysText += &quot;&lt;p&gt;&quot; + item.description + &quot; &quot; + link + &quot;&lt;/p&gt;&quot;;"></outline>
							<outline text="feedTitle = item.meta.title;"></outline>
							<outline text="feedLink = item.meta.link;"></outline>
							<outline text="feedDescription = item.meta.description;"></outline>
							<outline text="feedDocs = item.meta.docs;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="var xmltext = &quot;&quot;, indentlevel = 0;"></outline>
				<outline text="//build xmltext">
					<outline created="Wed, 19 Jun 2013 18:21:56 GMT" pgfnum="26656" text="function add (s) {">
						<outline created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661" text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
						<outline created="Wed, 19 Jun 2013 18:22:01 GMT" pgfnum="26658" text="}"></outline>
						</outline>
					<outline text="function encode (s) {">
						<outline text="return (utils.encodeXml (s));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;)"></outline>
					<outline text="add (&quot;&lt;!-- RSS generated by &quot; + myProductName + &quot; v&quot; + myVersion + &quot; on &quot; + nowstring + &quot; --&gt;&quot;)"></outline>
					<outline text="add (&quot;&lt;rss version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++"></outline>
					<outline text="add (&quot;&lt;channel&gt;&quot;); indentlevel++;"></outline>
					<outline text=""></outline>
					<outline text="//header elements">
						<outline text="add (&quot;&lt;title&gt;&quot; + encode (feedTitle) + &quot;&lt;/title&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;link&gt;&quot; + encode (feedLink) + &quot;&lt;/link&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;description&gt;&quot; + encode (feedDescription) + &quot;&lt;/description&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;pubDate&gt;&quot; + theDay.toUTCString () + &quot;&lt;/pubDate&gt;&quot;); "></outline>
						<outline text="add (&quot;&lt;lastBuildDate&gt;&quot; + nowUtcString + &quot;&lt;/lastBuildDate&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;language&gt;&quot; + encode (&quot;en-us&quot;) + &quot;&lt;/language&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;generator&gt;&quot; + encode (myProductName + &quot; v&quot; + myVersion) + &quot;&lt;/generator&gt;&quot;);"></outline>
						<outline text="if (feedDocs !== undefined) {">
							<outline text="add (&quot;&lt;docs&gt;&quot; + encode (feedDocs) + &quot;&lt;/docs&gt;&quot;);"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="//the item">
						<outline text="add (&quot;&lt;item&gt;&quot;); indentlevel++;"></outline>
						<outline text="add (&quot;&lt;title&gt;&quot; + encode (&quot;Dave Winer's links for &quot; + dateFormat (theDay, &quot;m/d/yyyy&quot;)) + &quot;&lt;/title&gt;&quot;); //10/3/16 by DW"></outline>
						<outline text="add (&quot;&lt;description&gt;&quot; + encode (todaysPreText + todaysText) + &quot;&lt;/description&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;guid isPermaLink=\&quot;false\&quot;&gt;&quot; + encode (dateFormat (theDay, &quot;m/d/yyyy&quot;)) + &quot;&lt;/guid&gt;&quot;);"></outline>
						<outline text="add (&quot;&lt;pubDate&gt;&quot; + theDay.toUTCString () + &quot;&lt;/pubDate&gt;&quot;); "></outline>
						<outline text="add (&quot;&lt;link&gt;https://twitter.com/davewiner/status/773699254124765185&lt;/link&gt;&quot;);  //ifttt requires a link element here?"></outline>
						<outline text="add (&quot;&lt;/item&gt;&quot;); indentlevel--;"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="add (&quot;&lt;/channel&gt;&quot;); indentlevel--;"></outline>
					<outline text="add (&quot;&lt;/rss&gt;&quot;); indentlevel--;"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="s3.newObject (config.s3PathNightlyFeed, xmltext, &quot;text/xml&quot;);"></outline>
				<outline text=""></outline>
				<outline text="stats.whenLastPublish = now;"></outline>
				<outline text="stats.ctPublishes++;"></outline>
				<outline text="stats.ctSecsLastPublish = utils.secondsSince (now);"></outline>
				<outline text="statsChanged ();"></outline>
				<outline text=""></outline>
				<outline text="console.log (&quot;RSS feed for &quot; + dateFormat (theDay, &quot;m/d/yyyy&quot;) + &quot; has &quot; + xmltext.length + &quot; chars. It took &quot; + stats.ctSecsLastPublish + &quot; secs to build.&quot;);"></outline>
				<outline text=""></outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback (todaysText);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function checkFeed () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="if (!utils.sameDay (now, stats.whenLastPublish)) {">
				<outline text="var yesterday = utils.dateYesterday (now);"></outline>
				<outline text="buildNightlyFeed (yesterday, function (todaysText) {">
					<outline text="var todaysTitle = &quot;Dave's linkblog for &quot; + dateFormat (yesterday, &quot;m/d/yyyy&quot;);"></outline>
					<outline text="var pagetable = {">
						<outline text="title: todaysTitle,"></outline>
						<outline text="bodytext: todaysText,"></outline>
						<outline text="slogan: utils.getRandomSnarkySlogan ()"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="var pagetext = utils.multipleReplaceAll (emailTemplate, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"></outline>
					<outline text=""></outline>
					<outline isComment="true" text="console.log (&quot;\n\n\n&quot; + pagetext + &quot;\n\n\n&quot;);"></outline>
					<outline text=""></outline>
					<outline text="sendMail.send (config.emailSendTo, todaysTitle, pagetext, config.emailSendFrom, function () {">
						<outline text="});"></outline>
						</outline>
					<outline text=""></outline>
					<outline isComment="true" text="fs.writeFile (&quot;email.html&quot;, pagetext, function (err) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;fs.writeFile: error == &quot; + err.message);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyMinute () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="console.log (&quot;\neveryMinute: &quot; + now.toLocaleTimeString ());"></outline>
			<outline text="checkFeed ();"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everySecond () {">
			<outline text="if (!flScheduledEveryMinute) { ">
				<outline text="if (new Date ().getSeconds () == 0) {">
					<outline text="setInterval (everyMinute, 60000); "></outline>
					<outline text="flScheduledEveryMinute = true;"></outline>
					<outline text="everyMinute (); //it's the top of the minute, we have to do one now"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flStatsDirty) {">
				<outline text="flStatsDirty = false;"></outline>
				<outline text="writeStats (fnameStats, stats);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function startup () {">
			<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; launched at &quot; + new Date ().toLocaleTimeString () + &quot;.\n&quot;);"></outline>
			<outline text="fs.readFile (emailTemplateFile, function (err, data) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;startup: error reading email template == &quot; + err.message)"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="emailTemplate = data.toString ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="readStats (fnameStats, stats, function () {">
					<outline text="console.log (&quot;startup: stats == &quot; + utils.jsonStringify (stats));"></outline>
					<outline text="readStats (fnameConfig, config, function () {">
						<outline text="console.log (&quot;startup: config == &quot; + utils.jsonStringify (config));"></outline>
						<outline text="checkFeed ();"></outline>
						<outline text="setInterval (everySecond, 1000); "></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"></outline>
		<outline text="startup ();"></outline>
		</body>
	</opml>
